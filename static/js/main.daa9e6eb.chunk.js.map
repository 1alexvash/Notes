{"version":3,"sources":["components/Preloader/Preloader.js","components/Notes/Note.js","components/Notes/Notes.js","components/AddNote/AddNote.js","App.js","serviceWorker.js","index.js"],"names":["Preloader","useState","loading","setLoading","setTimeout","className","src","alt","Note","note","removeNote","bg","text","onClick","role","aria-label","Notes","notes","map","key","id","AddNote","onSubmit","noteColor","changeNoteColor","defaultColors","style","background","e","name","required","rows","color","type","App","setNotes","setNoteColor","isFirstRun","useRef","useEffect","current","localStorage","JSON","stringify","undefined","parse","preventDefault","target","newNote","value","Date","newColor","filter","curNote","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.daa9e6eb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Preloader = () => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  setTimeout(() => {\r\n    setLoading(false);\r\n  }, 3000);\r\n\r\n  return loading ? (\r\n    <div className=\"Preloader\">\r\n      <div className=\"content\">\r\n        <div className=\"app-name\">Notes</div>\r\n        <div className=\"logo\">\r\n          <img src=\"logo512.png\" alt=\"logo\" />\r\n        </div>\r\n        <div className=\"bar\">\r\n          <div className=\"progress\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React from \"react\";\r\n\r\nconst Note = ({ note, removeNote }) => (\r\n  <div className={`Note note-${note.bg}`}>\r\n    {note.text}\r\n    <span\r\n      onClick={() => removeNote(note)}\r\n      role=\"img\"\r\n      aria-label=\"remove note\"\r\n      className=\"delete-note\"\r\n    >\r\n      &#10060;\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\nimport Note from \"./Note\";\r\n\r\nconst Notes = ({ notes, removeNote }) => (\r\n  <div className=\"Notes\">\r\n    {notes.map(note => (\r\n      <Note key={note.id} note={note} removeNote={removeNote} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Notes;\r\n","import React from \"react\";\r\n\r\nconst AddNote = ({ onSubmit, noteColor, changeNoteColor, defaultColors }) => {\r\n  return (\r\n    <form\r\n      style={{ background: noteColor }}\r\n      className=\"Add-Note\"\r\n      onSubmit={e => onSubmit(e)}\r\n    >\r\n      <span className={`new-note new-note-bg-${noteColor}`}>New Note</span>\r\n      <textarea name=\"newNote\" required rows=\"5\" />\r\n      <div className=\"confirmation\">\r\n        <div className=\"note-color\">\r\n          {defaultColors.map(color => (\r\n            <span\r\n              key={color}\r\n              className={`color color-${color} ${\r\n                noteColor === color ? \"active\" : \"\"\r\n              }`}\r\n              onClick={() => changeNoteColor(color)}\r\n            />\r\n          ))}\r\n        </div>\r\n        <button type=\"submit\">Add Note</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddNote;\r\n","import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Preloader from \"./components/Preloader/Preloader\";\nimport Notes from \"./components/Notes/Notes\";\nimport AddNote from \"./components/AddNote/AddNote\";\n\nimport \"./scss/main.css\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([\n    {\n      id: 0,\n      text: \"Go for a walk with Jessica\",\n      bg: \"white\"\n    },\n    {\n      id: 1,\n      text: \"Buy Milk\",\n      bg: \"white\"\n    },\n    {\n      id: 2,\n      text: \"Find a new job\",\n      bg: \"black\"\n    }\n  ]);\n  const [noteColor, setNoteColor] = useState(\"white\");\n  const defaultColors = [\n    \"white\",\n    \"red\",\n    \"orange\",\n    \"green\",\n    \"lightgreen\",\n    \"blue\",\n    \"deepskyblue\",\n    \"purple\",\n    \"pink\",\n    \"black\"\n  ];\n\n  function updateNotesAndSave() {\n    localStorage.notes = JSON.stringify(notes);\n  }\n\n  function getNotes() {\n    setNotes(JSON.parse(localStorage.notes));\n  }\n\n  const isFirstRun = useRef(true);\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n    } else {\n      updateNotesAndSave();\n    }\n\n    // eslint-disable-next-line\n  }, [notes]);\n\n  useEffect(() => {\n    if (localStorage.notes !== undefined) {\n      getNotes();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  function addNote(e) {\n    e.preventDefault();\n\n    if (e.target.newNote.value !== \"\") {\n      const newNote = {\n        id: new Date(),\n        text: e.target.newNote.value,\n        bg: noteColor\n      };\n      setNotes([...notes, newNote]);\n      e.target.newNote.value = \"\";\n    }\n  }\n\n  function removeNote(note) {\n    setNotes(notes.filter(curNote => curNote !== note));\n  }\n\n  function changeNoteColor(newColor) {\n    setNoteColor(newColor);\n  }\n\n  return (\n    <div className=\"App\">\n      <Preloader />\n      <AddNote\n        onSubmit={addNote}\n        noteColor={noteColor}\n        changeNoteColor={changeNoteColor}\n        defaultColors={defaultColors}\n      />\n      <Notes notes={notes} removeNote={removeNote} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}