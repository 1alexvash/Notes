{"version":3,"sources":["components/Preloader/Preloader.js","components/Notes/Note.js","components/Notes/Notes.js","components/AddNote/AddNote.js","App.js","serviceWorker.js","index.js"],"names":["Preloader","useState","loading","setLoading","setTimeout","className","src","alt","Note","note","removeNote","bg","text","onClick","role","aria-label","Notes","notes","reverse","map","key","id","AddNote","onSubmit","noteColor","changeNoteColor","defaultColors","style","background","e","name","required","rows","color","type","App","setNotes","setNoteColor","isFirstRun","useRef","useEffect","current","localStorage","JSON","stringify","undefined","parse","preventDefault","target","newNote","value","Date","newColor","filter","curNote","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.db0b9706.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Preloader = () => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  setTimeout(() => {\r\n    setLoading(false);\r\n  }, 3000);\r\n\r\n  return loading ? (\r\n    <div className=\"Preloader\">\r\n      <div className=\"content\">\r\n        <div className=\"app-name\">Notes</div>\r\n        <div className=\"logo\">\r\n          <img src=\"logo512.png\" alt=\"logo\" />\r\n        </div>\r\n        <div className=\"bar\">\r\n          <div className=\"progress\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React from \"react\";\r\n\r\nconst Note = ({ note, removeNote }) => (\r\n  <div className={`Note note-${note.bg}`}>\r\n    {note.text}\r\n    <span\r\n      onClick={() => removeNote(note)}\r\n      role=\"img\"\r\n      aria-label=\"remove note\"\r\n      className=\"delete-note\"\r\n    >\r\n      &#10060;\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\nimport Note from \"./Note\";\r\n\r\nconst Notes = ({ notes, removeNote }) => (\r\n  <div className=\"Notes\">\r\n    {[...notes].reverse().map(note => (\r\n      <Note key={note.id} note={note} removeNote={removeNote} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Notes;\r\n","import React from \"react\";\r\n\r\nconst AddNote = ({ onSubmit, noteColor, changeNoteColor, defaultColors }) => {\r\n  return (\r\n    <form\r\n      style={{ background: noteColor }}\r\n      className=\"Add-Note\"\r\n      onSubmit={e => onSubmit(e)}\r\n    >\r\n      <span className={`new-note new-note-bg-${noteColor}`}>New Note</span>\r\n      <textarea name=\"newNote\" required rows=\"5\" />\r\n      <div className=\"confirmation\">\r\n        <div className=\"note-color\">\r\n          {defaultColors.map(color => (\r\n            <span\r\n              key={color}\r\n              className={`color color-${color} ${\r\n                noteColor === color ? \"active\" : \"\"\r\n              }`}\r\n              onClick={() => changeNoteColor(color)}\r\n            />\r\n          ))}\r\n        </div>\r\n        <button type=\"submit\">Add Note</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddNote;\r\n","import React from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nimport Preloader from \"./components/Preloader/Preloader\";\r\nimport Notes from \"./components/Notes/Notes\";\r\nimport AddNote from \"./components/AddNote/AddNote\";\r\n\r\nimport \"./scss/main.css\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([\r\n    {\r\n      id: 0,\r\n      text: \"Hangout with Jessica\",\r\n      bg: \"white\"\r\n    },\r\n    {\r\n      id: 1,\r\n      text: \"Buy Groceries for a week\",\r\n      bg: \"white\"\r\n    },\r\n    {\r\n      id: 2,\r\n      text: \"Reached out to John about new job\",\r\n      bg: \"deepskyblue\"\r\n    },\r\n    {\r\n      id: 3,\r\n      text: \"Take a French class\",\r\n      bg: \"orange\"\r\n    }\r\n  ]);\r\n  const [noteColor, setNoteColor] = useState(\"white\");\r\n  const defaultColors = [\r\n    \"white\",\r\n    \"red\",\r\n    \"orange\",\r\n    \"green\",\r\n    \"lightgreen\",\r\n    \"blue\",\r\n    \"deepskyblue\",\r\n    \"purple\",\r\n    \"pink\",\r\n    \"black\"\r\n  ];\r\n\r\n  function updateNotesAndSave() {\r\n    localStorage.notes = JSON.stringify(notes);\r\n  }\r\n\r\n  function getNotes() {\r\n    setNotes(JSON.parse(localStorage.notes));\r\n  }\r\n\r\n  const isFirstRun = useRef(true);\r\n  useEffect(() => {\r\n    if (isFirstRun.current) {\r\n      isFirstRun.current = false;\r\n    } else {\r\n      updateNotesAndSave();\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [notes]);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.notes !== undefined) {\r\n      getNotes();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  function addNote(e) {\r\n    e.preventDefault();\r\n\r\n    if (e.target.newNote.value !== \"\") {\r\n      const newNote = {\r\n        id: new Date(),\r\n        text: e.target.newNote.value,\r\n        bg: noteColor\r\n      };\r\n      setNotes([...notes, newNote]);\r\n      e.target.newNote.value = \"\";\r\n    }\r\n  }\r\n\r\n  function removeNote(note) {\r\n    setNotes(notes.filter(curNote => curNote !== note));\r\n  }\r\n\r\n  function changeNoteColor(newColor) {\r\n    setNoteColor(newColor);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Preloader />\r\n      <AddNote\r\n        onSubmit={addNote}\r\n        noteColor={noteColor}\r\n        changeNoteColor={changeNoteColor}\r\n        defaultColors={defaultColors}\r\n      />\r\n      <Notes notes={notes} removeNote={removeNote} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}